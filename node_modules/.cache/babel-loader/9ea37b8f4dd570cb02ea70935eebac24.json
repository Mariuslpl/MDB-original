{"ast":null,"code":"/*\nCopyright (c) 2020 Daybrush\nname: selecto\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/selecto.git\nversion: 1.13.2\n*/\nimport EventEmitter from '@scena/event-emitter';\nimport Gesto from 'gesto';\nimport { Properties } from 'framework-utils';\nimport { hasClass, addClass, calculateBoundSize, isObject, isString, removeEvent, addEvent, between, isArray, camelize } from '@daybrush/utils';\nimport { diff } from '@egjs/children-differ';\nimport DragScroll from '@scena/dragscroll';\nimport KeyController, { getCombi } from 'keycon';\nimport { fitPoints, isInside, getOverlapPoints, getAreaSize } from 'overlap-area';\nimport { createMatrix, getDistElementMatrix, calculateMatrixDist } from 'css-to-mat';\nimport styled from 'css-styled';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n}\n\nfunction getClient(e) {\n  if (\"touches\" in e) {\n    var touch = e.touches[0] || e.changedTouches[0];\n    return {\n      clientX: touch.clientX,\n      clientY: touch.clientY\n    };\n  } else {\n    return {\n      clientX: e.clientX,\n      clientY: e.clientY\n    };\n  }\n}\n\nfunction createElement(jsx, prevTarget, container) {\n  var tag = jsx.tag,\n      children = jsx.children,\n      attributes = jsx.attributes,\n      className = jsx.className,\n      style = jsx.style;\n  var el = prevTarget || document.createElement(tag);\n\n  for (var name in attributes) {\n    el.setAttribute(name, attributes[name]);\n  }\n\n  var elChildren = el.children;\n  children.forEach(function (child, i) {\n    createElement(child, elChildren[i], el);\n  });\n\n  if (className) {\n    className.split(\" \").forEach(function (name) {\n      if (!hasClass(el, name)) {\n        addClass(el, name);\n      }\n    });\n  }\n\n  if (style) {\n    var elStyle = el.style;\n\n    for (var name in style) {\n      elStyle[name] = style[name];\n    }\n  }\n\n  if (!prevTarget && container) {\n    container.appendChild(el);\n  }\n\n  return el;\n}\n\nfunction h(tag, attrs) {\n  var children = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    children[_i - 2] = arguments[_i];\n  }\n\n  var _a = attrs || {},\n      _b = _a.className,\n      className = _b === void 0 ? \"\" : _b,\n      _c = _a.style,\n      style = _c === void 0 ? {} : _c,\n      attributes = __rest(_a, [\"className\", \"style\"]);\n\n  return {\n    tag: tag,\n    className: className,\n    style: style,\n    attributes: attributes,\n    children: children\n  };\n}\n\nfunction diffValue(prev, cur, func) {\n  if (prev !== cur) {\n    func(prev, cur);\n  }\n}\n\nfunction getRect(e, ratio, boundArea) {\n  var _a;\n\n  if (boundArea === void 0) {\n    boundArea = e.datas.boundArea;\n  }\n\n  var _b = e.distX,\n      distX = _b === void 0 ? 0 : _b,\n      _c = e.distY,\n      distY = _c === void 0 ? 0 : _c;\n  var _d = e.datas,\n      startX = _d.startX,\n      startY = _d.startY;\n\n  if (ratio > 0) {\n    var nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n    var nextWidth = ratio * nextHeight;\n    distX = (distX >= 0 ? 1 : -1) * nextWidth;\n    distY = (distY >= 0 ? 1 : -1) * nextHeight;\n  }\n\n  var width = Math.abs(distX);\n  var height = Math.abs(distY);\n  var maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n  var maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n  _a = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio), width = _a[0], height = _a[1];\n  distX = (distX >= 0 ? 1 : -1) * width;\n  distY = (distY >= 0 ? 1 : -1) * height;\n  var tx = Math.min(0, distX);\n  var ty = Math.min(0, distY);\n  var left = startX + tx;\n  var top = startY + ty;\n  return {\n    left: left,\n    top: top,\n    right: left + width,\n    bottom: top + height,\n    width: width,\n    height: height\n  };\n}\n\nfunction getDefaultElementRect(el) {\n  var rect = el.getBoundingClientRect();\n  var left = rect.left,\n      top = rect.top,\n      width = rect.width,\n      height = rect.height;\n  return {\n    pos1: [left, top],\n    pos2: [left + width, top],\n    pos3: [left, top + height],\n    pos4: [left + width, top + height]\n  };\n}\n\nfunction passTargets(beforeTargets, afterTargets) {\n  var _a = diff(beforeTargets, afterTargets),\n      list = _a.list,\n      prevList = _a.prevList,\n      added = _a.added,\n      removed = _a.removed;\n\n  return added.map(function (index) {\n    return list[index];\n  }).concat(removed.map(function (index) {\n    return prevList[index];\n  }));\n}\n\nvar injector = styled(\"\\n:host {\\n    position: fixed;\\n    display: none;\\n    border: 1px solid #4af;\\n    background: rgba(68, 170, 255, 0.5);\\n    z-index: 100;\\n}\\n:host {\\n    position: absolute;\\n}\\n\");\n/**\n * @memberof Selecto\n */\n\nvar CLASS_NAME = \"selecto-selection \" + injector.className;\nvar PROPERTIES = [\"boundContainer\", \"selectableTargets\", \"selectByClick\", \"selectFromInside\", \"continueSelect\", \"toggleContinueSelect\", \"keyContainer\", \"hitRate\", \"scrollOptions\", \"checkInput\", \"preventDefault\", \"ratio\", \"getElementRect\", \"preventDragFromInside\", \"rootContainer\", \"dragCondition\"];\n/**\n * @memberof Selecto\n */\n\nvar OPTIONS = __spreadArrays([// ignore target, container,\n\"dragContainer\", \"cspNonce\"], PROPERTIES);\n\nvar OPTION_TYPES = {\n  boundContainer: null,\n  target: null,\n  container: null,\n  dragContainer: null,\n  selectableTargets: Array,\n  selectByClick: Boolean,\n  selectFromInside: Boolean,\n  continueSelect: Boolean,\n  toggleContinueSelect: Array,\n  keyContainer: null,\n  hitRate: Number,\n  scrollOptions: Object,\n  checkInput: Boolean,\n  preventDefault: Boolean,\n  cspNonce: String,\n  ratio: Number,\n  getElementRect: Function,\n  preventDragFromInside: Boolean,\n  rootContainer: Object,\n  dragCondition: Function\n};\n/**\n * @memberof Selecto\n */\n\nvar EVENTS = [\"dragStart\", \"drag\", \"dragEnd\", \"selectStart\", \"select\", \"selectEnd\", \"keydown\", \"keyup\", \"scroll\"];\n/**\n * @memberof Selecto\n */\n\nvar METHODS = [\"clickTarget\", \"getSelectableElements\", \"setSelectedTargets\", \"getElementPoints\", \"getSelectedTargets\", \"findSelectableTargets\", \"triggerDragStart\"];\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n\nvar Selecto = /*#__PURE__*/function (_super) {\n  __extends(Selecto, _super);\n  /**\n   *\n   */\n\n\n  function Selecto(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.selectedTargets = [];\n    _this.dragScroll = new DragScroll();\n\n    _this.onDragStart = function (e, clickedTarget) {\n      var datas = e.datas,\n          clientX = e.clientX,\n          clientY = e.clientY,\n          inputEvent = e.inputEvent;\n      var _a = _this.options,\n          continueSelect = _a.continueSelect,\n          selectFromInside = _a.selectFromInside,\n          selectByClick = _a.selectByClick,\n          rootContainer = _a.rootContainer,\n          boundContainer = _a.boundContainer,\n          _b = _a.preventDragFromInside,\n          preventDragFromInside = _b === void 0 ? true : _b,\n          dragCondition = _a.dragCondition;\n\n      if (dragCondition && !dragCondition(e)) {\n        e.stop();\n        return;\n      }\n\n      _this.findSelectableTargets(datas);\n\n      datas.startSelectedTargets = _this.selectedTargets;\n      datas.scaleMatrix = createMatrix();\n      datas.containerX = 0;\n      datas.containerY = 0;\n      var boundArea = {\n        left: -Infinity,\n        top: -Infinity,\n        right: Infinity,\n        bottom: Infinity\n      };\n\n      if (rootContainer) {\n        var containerRect = _this.container.getBoundingClientRect();\n\n        datas.containerX = containerRect.left;\n        datas.containerY = containerRect.top;\n        datas.scaleMatrix = getDistElementMatrix(_this.container, rootContainer);\n      }\n\n      if (boundContainer) {\n        var boundInfo = isObject(boundContainer) && \"element\" in boundContainer ? _assign({\n          left: true,\n          top: true,\n          bottom: true,\n          right: true\n        }, boundContainer) : {\n          element: boundContainer,\n          left: true,\n          top: true,\n          bottom: true,\n          right: true\n        };\n        var boundElement = boundInfo.element;\n        var rectElement = void 0;\n\n        if (boundElement) {\n          if (isString(boundElement)) {\n            rectElement = document.querySelector(boundElement);\n          } else if (boundElement === true) {\n            rectElement = _this.container;\n          } else {\n            rectElement = boundElement;\n          }\n\n          var rect = rectElement.getBoundingClientRect();\n\n          if (boundInfo.left) {\n            boundArea.left = rect.left;\n          }\n\n          if (boundInfo.top) {\n            boundArea.top = rect.top;\n          }\n\n          if (boundInfo.right) {\n            boundArea.right = rect.right;\n          }\n\n          if (boundInfo.bottom) {\n            boundArea.bottom = rect.bottom;\n          }\n        }\n      }\n\n      datas.boundArea = boundArea;\n      var hitRect = {\n        left: clientX,\n        top: clientY,\n        right: clientX,\n        bottom: clientY,\n        width: 0,\n        height: 0\n      };\n      var firstPassedTargets = [];\n\n      if (!selectFromInside || selectByClick) {\n        var pointTarget = clickedTarget || document.elementFromPoint(clientX, clientY);\n\n        while (pointTarget) {\n          if (datas.selectableTargets.indexOf(pointTarget) > -1) {\n            break;\n          }\n\n          pointTarget = pointTarget.parentElement;\n        }\n\n        firstPassedTargets = pointTarget ? [pointTarget] : [];\n      }\n\n      var hasInsideTargets = firstPassedTargets.length > 0;\n      var isPreventSelect = !selectFromInside && hasInsideTargets;\n\n      if (isPreventSelect && !selectByClick) {\n        e.stop();\n        return false;\n      }\n\n      var type = inputEvent.type;\n      var isTrusted = type === \"mousedown\" || type === \"touchstart\";\n      /**\n       * When the drag starts, the dragStart event is called.\n       * Call the stop () function if you have a specific element or don't want to raise a select\n       * @memberof Selecto\n       * @event dragStart\n       * @param {OnDragStart} - Parameters for the dragStart event\n       * @example\n       * import Selecto from \"selecto\";\n       *\n       * const selecto = new Selecto({\n       *   container: document.body,\n       *   selectByClick: true,\n       *   selectFromInside: false,\n       * });\n       *\n       * selecto.on(\"dragStart\", e => {\n       *   if (e.inputEvent.target.tagName === \"SPAN\") {\n       *     e.stop();\n       *   }\n       * }).on(\"select\", e => {\n       *   e.added.forEach(el => {\n       *     el.classList.add(\"selected\");\n       *   });\n       *   e.removed.forEach(el => {\n       *     el.classList.remove(\"selected\");\n       *   });\n       * });\n       */\n\n      var result = !e.isClick && isTrusted ? _this.emit(\"dragStart\", _assign({}, e)) : true;\n\n      if (!result) {\n        e.stop();\n        return false;\n      }\n\n      if (!continueSelect) {\n        datas.startPassedTargets = [];\n      } else {\n        firstPassedTargets = passTargets(_this.selectedTargets, firstPassedTargets);\n        datas.startPassedTargets = _this.selectedTargets;\n      }\n\n      _this.select(_this.selectedTargets, firstPassedTargets, hitRect, inputEvent, true);\n\n      datas.startX = clientX;\n      datas.startY = clientY;\n      datas.selectFlag = false;\n      datas.preventDragFromInside = false;\n      var offsetPos = calculateMatrixDist(datas.scaleMatrix, [clientX - datas.containerX, clientY - datas.containerY]);\n      datas.boundsArea = _this.target.style.cssText += \"position: \" + (rootContainer ? \"absolute\" : \"fixed\") + \";\" + \"left:0px;top:0px;\" + (\"transform: translate(\" + offsetPos[0] + \"px, \" + offsetPos[1] + \"px)\");\n\n      if (isPreventSelect && selectByClick) {\n        inputEvent.preventDefault();\n\n        if (preventDragFromInside) {\n          _this.selectEnd(datas.startSelectedTargets, datas.startPassedTargets, hitRect, e);\n\n          datas.preventDragFromInside = true;\n        }\n      } else {\n        datas.selectFlag = true;\n\n        if (type === \"touchstart\") {\n          inputEvent.preventDefault();\n        }\n\n        var scrollOptions = _this.options.scrollOptions;\n\n        if (scrollOptions && scrollOptions.container) {\n          _this.dragScroll.dragStart(e, scrollOptions);\n        }\n      }\n\n      return true;\n    };\n\n    _this.onDrag = function (e) {\n      if (e.datas.selectFlag) {\n        var scrollOptions = _this.options.scrollOptions;\n\n        if (scrollOptions && scrollOptions.container) {\n          if (_this.dragScroll.drag(e, scrollOptions)) {\n            return;\n          }\n        }\n      }\n\n      _this.check(e);\n    };\n\n    _this.onDragEnd = function (e) {\n      var datas = e.datas,\n          inputEvent = e.inputEvent;\n      var rect = getRect(e, _this.options.ratio);\n      var selectFlag = datas.selectFlag;\n\n      if (inputEvent && !e.isClick) {\n        _this.emit(\"dragEnd\", _assign(_assign({\n          isDouble: !!e.isDouble,\n          isDrag: false,\n          isSelect: selectFlag\n        }, e), {\n          isClick: !!e.isClick,\n          rect: rect\n        }));\n      }\n\n      _this.target.style.cssText += \"display: none;\";\n\n      if (selectFlag) {\n        datas.selectFlag = false;\n\n        _this.dragScroll.dragEnd();\n      }\n\n      if (!datas.preventDragFromInside) {\n        _this.selectEnd(datas.startSelectedTargets, datas.startPassedTargets, rect, e);\n      }\n    };\n\n    _this.onKeyDown = function (e) {\n      if (!_this.sameCombiKey(e)) {\n        return;\n      }\n\n      _this.continueSelect = true;\n      /**\n       * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n       * @memberof Selecto\n       * @event keydown\n       * @example\n       * import Selecto from \"selecto\";\n       *\n       * const selecto = new Selecto({\n       *   container: document.body,\n       *   toggleContinueSelect: \"shift\";\n       *   keyContainer: window,\n       * });\n       *\n       * selecto.on(\"keydown\", () => {\n       *   document.querySelector(\".button\").classList.add(\"selected\");\n       * }).on(\"keyup\", () => {\n       *   document.querySelector(\".button\").classList.remove(\"selected\");\n       * }).on(\"select\", e => {\n       *   e.added.forEach(el => {\n       *     el.classList.add(\"selected\");\n       *   });\n       *   e.removed.forEach(el => {\n       *     el.classList.remove(\"selected\");\n       *   });\n       * });\n       */\n\n      _this.emit(\"keydown\", {});\n    };\n\n    _this.onKeyUp = function (e) {\n      if (!_this.sameCombiKey(e, true)) {\n        return;\n      }\n\n      _this.continueSelect = false;\n      /**\n       * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n       * @memberof Selecto\n       * @event keyup\n       * @example\n       * import Selecto from \"selecto\";\n       *\n       * const selecto = new Selecto({\n       *   container: document.body,\n       *   toggleContinueSelect: \"shift\";\n       *   keyContainer: window,\n       * });\n       *\n       * selecto.on(\"keydown\", () => {\n       *   document.querySelector(\".button\").classList.add(\"selected\");\n       * }).on(\"keyup\", () => {\n       *   document.querySelector(\".button\").classList.remove(\"selected\");\n       * }).on(\"select\", e => {\n       *   e.added.forEach(el => {\n       *     el.classList.add(\"selected\");\n       *   });\n       *   e.removed.forEach(el => {\n       *     el.classList.remove(\"selected\");\n       *   });\n       * });\n       */\n\n      _this.emit(\"keyup\", {});\n    };\n\n    _this.onBlur = function () {\n      if (_this.toggleContinueSelect && _this.continueSelect) {\n        _this.continueSelect = false;\n\n        _this.emit(\"keyup\", {});\n      }\n    };\n\n    _this.onDocumentSelectStart = function (e) {\n      if (!_this.gesto.isFlag()) {\n        return;\n      }\n\n      var dragContainer = _this.dragContainer;\n\n      if (dragContainer === window) {\n        dragContainer = document.documentElement;\n      }\n\n      var containers = dragContainer instanceof Element ? [dragContainer] : [].slice.call(dragContainer);\n      var target = e.target;\n      containers.some(function (container) {\n        if (container === target || container.contains(target)) {\n          e.preventDefault();\n          return true;\n        }\n      });\n    };\n\n    _this.target = options.target;\n    _this.container = options.container || document.body;\n    _this.options = _assign({\n      target: null,\n      container: null,\n      dragContainer: null,\n      selectableTargets: [],\n      selectByClick: true,\n      selectFromInside: true,\n      hitRate: 100,\n      continueSelect: false,\n      toggleContinueSelect: null,\n      keyContainer: null,\n      scrollOptions: undefined,\n      checkInput: false,\n      preventDefault: false,\n      boundContainer: false,\n      preventDragFromInside: true,\n      dragCondition: null,\n      rootContainer: null,\n      getElementRect: getDefaultElementRect,\n      cspNonce: \"\",\n      ratio: 0\n    }, options);\n\n    _this.initElement();\n\n    _this.initDragScroll();\n\n    _this.setKeyController();\n\n    return _this;\n  }\n  /**\n   * You can set the currently selected targets.\n   *\n   */\n\n\n  var __proto = Selecto.prototype;\n\n  __proto.setSelectedTargets = function (selectedTargets) {\n    this.selectedTargets = selectedTargets;\n    return this;\n  };\n  /**\n   * You can get the currently selected targets.\n   */\n\n\n  __proto.getSelectedTargets = function () {\n    return this.selectedTargets;\n  };\n\n  __proto.setKeyContainer = function (keyContainer) {\n    var _this = this;\n\n    var options = this.options;\n    diffValue(options.keyContainer, keyContainer, function () {\n      options.keyContainer = keyContainer;\n\n      _this.setKeyController();\n    });\n  };\n\n  __proto.setToggleContinueSelect = function (toggleContinueSelect) {\n    var _this = this;\n\n    var options = this.options;\n    diffValue(options.toggleContinueSelect, toggleContinueSelect, function () {\n      options.toggleContinueSelect = toggleContinueSelect;\n\n      _this.setKeyEvent();\n    });\n  };\n\n  __proto.setPreventDefault = function (value) {\n    this.gesto.options.preventDefault = value;\n  };\n\n  __proto.setCheckInput = function (value) {\n    this.gesto.options.checkInput = value;\n  };\n  /**\n   * `OnDragStart` is triggered by an external event.\n   * @param - external event\n   * @example\n   * import Selecto from \"selecto\";\n   *\n   * const selecto = new Selecto();\n   *\n   * window.addEventListener(\"mousedown\", e => {\n   *   selecto.triggerDragStart(e);\n   * });\n   */\n\n\n  __proto.triggerDragStart = function (e) {\n    this.gesto.triggerDragStart(e);\n    return this;\n  };\n  /**\n   * Destroy elements, properties, and events.\n   */\n\n\n  __proto.destroy = function () {\n    this.off();\n    this.keycon && this.keycon.destroy();\n    this.gesto.unset();\n    this.injectResult.destroy();\n    removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n    this.keycon = null;\n    this.gesto = null;\n    this.injectResult = null;\n    this.target = null;\n    this.container = null;\n    this.options = null;\n  };\n\n  __proto.getElementPoints = function (target) {\n    var getElementRect = this.getElementRect || getDefaultElementRect;\n    var info = getElementRect(target);\n    var points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n    if (getElementRect !== getDefaultElementRect) {\n      var rect = target.getBoundingClientRect();\n      return fitPoints(points, rect);\n    }\n\n    return points;\n  };\n  /**\n   * Get all elements set in `selectableTargets`.\n   */\n\n\n  __proto.getSelectableElements = function () {\n    var selectableElements = [];\n    this.options.selectableTargets.forEach(function (target) {\n      if (isObject(target)) {\n        selectableElements.push(target);\n      } else {\n        var elements = [].slice.call(document.querySelectorAll(target));\n        elements.forEach(function (el) {\n          selectableElements.push(el);\n        });\n      }\n    });\n    return selectableElements;\n  };\n  /**\n   * Find for selectableTargets again during drag event\n   */\n\n\n  __proto.findSelectableTargets = function (datas) {\n    var _this = this;\n\n    if (datas === void 0) {\n      datas = this.gesto.getEventDatas();\n    }\n\n    var selectableTargets = this.getSelectableElements();\n    var selectablePoints = selectableTargets.map(function (target) {\n      return _this.getElementPoints(target);\n    });\n    datas.selectableTargets = selectableTargets;\n    datas.selectablePoints = selectablePoints;\n  };\n  /**\n   * External click or mouse events can be applied to the selecto.\n   * @params - Extenal click or mouse event\n   * @params - Specify the clicked target directly.\n   */\n\n\n  __proto.clickTarget = function (e, clickedTarget) {\n    var _a = getClient(e),\n        clientX = _a.clientX,\n        clientY = _a.clientY;\n\n    var dragEvent = {\n      datas: {\n        selectFlag: false\n      },\n      clientX: clientX,\n      clientY: clientY,\n      inputEvent: e,\n      isClick: true,\n      stop: function stop() {\n        return false;\n      }\n    };\n\n    if (this.onDragStart(dragEvent, clickedTarget)) {\n      this.onDragEnd(dragEvent);\n    }\n\n    return this;\n  };\n\n  __proto.setKeyController = function () {\n    var _a = this.options,\n        keyContainer = _a.keyContainer,\n        toggleContinueSelect = _a.toggleContinueSelect;\n\n    if (this.keycon) {\n      this.keycon.destroy();\n      this.keycon = null;\n    }\n\n    if (toggleContinueSelect) {\n      this.keycon = new KeyController(keyContainer || window);\n      this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n    }\n  };\n\n  __proto.setKeyEvent = function () {\n    var toggleContinueSelect = this.options.toggleContinueSelect;\n\n    if (!toggleContinueSelect || this.keycon) {\n      return;\n    }\n\n    this.setKeyController();\n  };\n\n  __proto.initElement = function () {\n    this.target = createElement(h(\"div\", {\n      className: CLASS_NAME\n    }), this.target, this.container);\n    var target = this.target;\n    var _a = this.options,\n        dragContainer = _a.dragContainer,\n        checkInput = _a.checkInput,\n        preventDefault = _a.preventDefault;\n    this.dragContainer = typeof dragContainer === \"string\" ? [].slice.call(document.querySelectorAll(dragContainer)) : this.options.dragContainer || this.target.parentNode;\n    this.gesto = new Gesto(this.dragContainer, {\n      checkWindowBlur: true,\n      container: window,\n      checkInput: checkInput,\n      preventDefault: preventDefault\n    }).on({\n      dragStart: this.onDragStart,\n      drag: this.onDrag,\n      dragEnd: this.onDragEnd\n    });\n    addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n    this.injectResult = injector.inject(target, {\n      nonce: this.options.cspNonce\n    });\n  };\n\n  __proto.hitTest = function (selectRect, clientX, clientY, targets, selectablePoints) {\n    var _a = this.options,\n        hitRate = _a.hitRate,\n        selectByClick = _a.selectByClick;\n    var left = selectRect.left,\n        top = selectRect.top,\n        right = selectRect.right,\n        bottom = selectRect.bottom;\n    var rectPoints = [[left, top], [right, top], [right, bottom], [left, bottom]];\n    return targets.filter(function (_, i) {\n      var points = selectablePoints[i];\n      var inArea = isInside([clientX, clientY], points);\n\n      if (selectByClick && inArea) {\n        return true;\n      }\n\n      var overlapPoints = getOverlapPoints(rectPoints, points);\n\n      if (!overlapPoints.length) {\n        return false;\n      }\n\n      var overlapSize = getAreaSize(overlapPoints);\n      var targetSize = getAreaSize(points);\n      var rate = between(Math.round(overlapSize / targetSize * 100), 0, 100);\n\n      if (rate >= Math.min(100, hitRate)) {\n        return true;\n      }\n\n      return false;\n    });\n  };\n\n  __proto.initDragScroll = function () {\n    var _this = this;\n\n    this.dragScroll.on(\"scroll\", function (_a) {\n      var container = _a.container,\n          direction = _a.direction;\n\n      _this.emit(\"scroll\", {\n        container: container,\n        direction: direction\n      });\n    }).on(\"move\", function (_a) {\n      var offsetX = _a.offsetX,\n          offsetY = _a.offsetY,\n          inputEvent = _a.inputEvent;\n      var datas = inputEvent.datas;\n      var boundArea = datas.boundArea;\n      datas.startX -= offsetX;\n      datas.startY -= offsetY;\n      datas.selectablePoints.forEach(function (points) {\n        points.forEach(function (pos) {\n          pos[0] -= offsetX;\n          pos[1] -= offsetY;\n        });\n      });\n      boundArea.left -= offsetX;\n      boundArea.right -= offsetX;\n      boundArea.top -= offsetY;\n      boundArea.bottom -= offsetY;\n\n      _this.gesto.scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n\n      inputEvent.distX += offsetX;\n      inputEvent.distY += offsetY;\n\n      _this.check(inputEvent);\n    });\n  };\n\n  __proto.select = function (prevSelectedTargets, selectedTargets, rect, inputEvent, isStart) {\n    var _a = diff(prevSelectedTargets, selectedTargets),\n        added = _a.added,\n        removed = _a.removed,\n        prevList = _a.prevList,\n        list = _a.list;\n\n    this.selectedTargets = selectedTargets;\n\n    if (isStart) {\n      /**\n       * When the select(drag) starts, the selectStart event is called.\n       * @memberof Selecto\n       * @event selectStart\n       * @param {Selecto.OnSelect} - Parameters for the selectStart event\n       * @example\n       * import Selecto from \"selecto\";\n       *\n       * const selecto = new Selecto({\n       *   container: document.body,\n       *   selectByClick: true,\n       *   selectFromInside: false,\n       * });\n       *\n       * selecto.on(\"selectStart\", e => {\n       *   e.added.forEach(el => {\n       *     el.classList.add(\"selected\");\n       *   });\n       *   e.removed.forEach(el => {\n       *     el.classList.remove(\"selected\");\n       *   });\n       * }).on(\"selectEnd\", e => {\n       *   e.afterAdded.forEach(el => {\n       *     el.classList.add(\"selected\");\n       *   });\n       *   e.afterRemoved.forEach(el => {\n       *     el.classList.remove(\"selected\");\n       *   });\n       * });\n       */\n      this.emit(\"selectStart\", {\n        selected: selectedTargets,\n        added: added.map(function (index) {\n          return list[index];\n        }),\n        removed: removed.map(function (index) {\n          return prevList[index];\n        }),\n        rect: rect,\n        inputEvent: inputEvent\n      });\n    }\n\n    if (added.length || removed.length) {\n      /**\n       * When the select in real time, the select event is called.\n       * @memberof Selecto\n       * @event select\n       * @param {Selecto.OnSelect} - Parameters for the select event\n       * @example\n       * import Selecto from \"selecto\";\n       *\n       * const selecto = new Selecto({\n       *   container: document.body,\n       *   selectByClick: true,\n       *   selectFromInside: false,\n       * });\n       *\n       * selecto.on(\"select\", e => {\n       *   e.added.forEach(el => {\n       *     el.classList.add(\"selected\");\n       *   });\n       *   e.removed.forEach(el => {\n       *     el.classList.remove(\"selected\");\n       *   });\n       * });\n       */\n      this.emit(\"select\", {\n        selected: selectedTargets,\n        added: added.map(function (index) {\n          return list[index];\n        }),\n        removed: removed.map(function (index) {\n          return prevList[index];\n        }),\n        rect: rect,\n        inputEvent: inputEvent\n      });\n    }\n  };\n\n  __proto.selectEnd = function (startSelectedTargets, startPassedTargets, rect, e) {\n    var inputEvent = e.inputEvent,\n        isDouble = e.isDouble;\n\n    var _a = diff(startSelectedTargets, this.selectedTargets),\n        added = _a.added,\n        removed = _a.removed,\n        prevList = _a.prevList,\n        list = _a.list;\n\n    var _b = diff(startPassedTargets, this.selectedTargets),\n        afterAdded = _b.added,\n        afterRemoved = _b.removed,\n        afterPrevList = _b.prevList,\n        afterList = _b.list;\n\n    var type = inputEvent && inputEvent.type;\n    var isDragStart = type === \"mousedown\" || type === \"touchstart\";\n    /**\n     * When the select(dragEnd or click) ends, the selectEnd event is called.\n     * @memberof Selecto\n     * @event selectEnd\n     * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto({\n     *   container: document.body,\n     *   selectByClick: true,\n     *   selectFromInside: false,\n     * });\n     *\n     * selecto.on(\"selectStart\", e => {\n     *   e.added.forEach(el => {\n     *     el.classList.add(\"selected\");\n     *   });\n     *   e.removed.forEach(el => {\n     *     el.classList.remove(\"selected\");\n     *   });\n     * }).on(\"selectEnd\", e => {\n     *   e.afterAdded.forEach(el => {\n     *     el.classList.add(\"selected\");\n     *   });\n     *   e.afterRemoved.forEach(el => {\n     *     el.classList.remove(\"selected\");\n     *   });\n     * });\n     */\n\n    this.emit(\"selectEnd\", {\n      selected: this.selectedTargets,\n      added: added.map(function (index) {\n        return list[index];\n      }),\n      removed: removed.map(function (index) {\n        return prevList[index];\n      }),\n      afterAdded: afterAdded.map(function (index) {\n        return afterList[index];\n      }),\n      afterRemoved: afterRemoved.map(function (index) {\n        return afterPrevList[index];\n      }),\n      isDragStart: isDragStart,\n      isClick: !!e.isClick,\n      isDouble: !!isDouble,\n      rect: rect,\n      inputEvent: inputEvent\n    });\n  };\n\n  __proto.check = function (e, rect) {\n    if (rect === void 0) {\n      rect = getRect(e, this.options.ratio);\n    }\n\n    var datas = e.datas,\n        inputEvent = e.inputEvent;\n    var top = rect.top,\n        left = rect.left,\n        width = rect.width,\n        height = rect.height;\n    var selectFlag = datas.selectFlag;\n    var containerX = datas.containerX,\n        containerY = datas.containerY,\n        scaleMatrix = datas.scaleMatrix;\n    var offsetPos = calculateMatrixDist(scaleMatrix, [left - containerX, top - containerY]);\n    var offsetSize = calculateMatrixDist(scaleMatrix, [width, height]);\n    var prevSelectedTargets = [];\n    var selectedTargets = [];\n\n    if (selectFlag) {\n      this.target.style.cssText += \"display: block;\" + \"left:0px;top:0px;\" + (\"transform: translate(\" + offsetPos[0] + \"px, \" + offsetPos[1] + \"px);\") + (\"width:\" + offsetSize[0] + \"px;height:\" + offsetSize[1] + \"px;\");\n      var passedTargets = this.hitTest(rect, datas.startX, datas.startY, datas.selectableTargets, datas.selectablePoints);\n      prevSelectedTargets = this.selectedTargets;\n      selectedTargets = passTargets(datas.startPassedTargets, passedTargets);\n      this.selectedTargets = selectedTargets;\n    }\n    /**\n     * When the drag, the drag event is called.\n     * Call the stop () function if you have a specific element or don't want to raise a select\n     * @memberof Selecto\n     * @event drag\n     * @param {OnDrag} - Parameters for the drag event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto({\n     *   container: document.body,\n     *   selectByClick: true,\n     *   selectFromInside: false,\n     * });\n     *\n     * selecto.on(\"drag\", e => {\n     *   e.stop();\n     * }).on(\"select\", e => {\n     *   e.added.forEach(el => {\n     *     el.classList.add(\"selected\");\n     *   });\n     *   e.removed.forEach(el => {\n     *     el.classList.remove(\"selected\");\n     *   });\n     * });\n     */\n\n\n    var result = this.emit(\"drag\", _assign(_assign({}, e), {\n      isSelect: selectFlag,\n      rect: rect\n    }));\n\n    if (result === false) {\n      this.target.style.cssText += \"display: none;\";\n      e.stop();\n      return;\n    }\n\n    if (selectFlag) {\n      this.select(prevSelectedTargets, selectedTargets, rect, inputEvent);\n    }\n  };\n\n  __proto.sameCombiKey = function (e, isKeyup) {\n    var toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n    var combi = getCombi(e.inputEvent, e.key);\n    var toggleKeys = isArray(toggleContinueSelect[0]) ? toggleContinueSelect : [toggleContinueSelect];\n\n    if (isKeyup) {\n      var singleKey_1 = e.key;\n      return toggleKeys.some(function (keys) {\n        return keys.some(function (key) {\n          return key === singleKey_1;\n        });\n      });\n    }\n\n    return toggleKeys.some(function (keys) {\n      return keys.every(function (key) {\n        return combi.indexOf(key) > -1;\n      });\n    });\n  };\n\n  Selecto = __decorate([Properties(PROPERTIES, function (prototype, property) {\n    var attributes = {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return this.options[property];\n      }\n    };\n    var setter = camelize(\"set \" + property);\n\n    if (prototype[setter]) {\n      attributes.set = function set(value) {\n        this[setter](value);\n      };\n    } else {\n      attributes.set = function set(value) {\n        this.options[property] = value;\n      };\n    }\n\n    Object.defineProperty(prototype, property, attributes);\n  })], Selecto);\n  return Selecto;\n}(EventEmitter);\n\nvar Selecto$1 = /*#__PURE__*/function (_super) {\n  __extends(Selecto, _super);\n\n  function Selecto() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return Selecto;\n}(Selecto);\n\nexport default Selecto$1;\nexport { CLASS_NAME, EVENTS, METHODS, OPTIONS, OPTION_TYPES, PROPERTIES };","map":{"version":3,"sources":["../src/utils.ts","../src/consts.ts","../src/SelectoManager.tsx","../src/Selecto.tsx"],"names":["getClient","e","touch","clientX","clientY","createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","elChildren","hasClass","addClass","elStyle","h","attrs","_a","_b","_c","diffValue","prev","cur","func","getRect","ratio","boundArea","_d","startX","startY","nextHeight","Math","distX","distY","nextWidth","width","height","maxWidth","maxHeight","tx","ty","left","top","right","bottom","getDefaultElementRect","rect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","list","prevList","added","removed","injector","styled","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","boundContainer","target","dragContainer","selectableTargets","selectByClick","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","scrollOptions","checkInput","preventDefault","cspNonce","getElementRect","preventDragFromInside","rootContainer","dragCondition","Function","EVENTS","METHODS","Properties","enumerable","configurable","get","setter","camelize","prototype","Object","Selecto","__extends","_this","options","_super","undefined","removeEvent","info","points","fitPoints","selectableElements","isObject","elements","datas","selectablePoints","dragEvent","selectFlag","inputEvent","isClick","stop","checkWindowBlur","dragStart","drag","dragEnd","onDragEnd","addEvent","nonce","rectPoints","inArea","isInside","overlapPoints","getOverlapPoints","overlapSize","getAreaSize","targetSize","rate","between","direction","offsetX","offsetY","pos","selected","isDouble","afterAdded","afterRemoved","afterPrevList","afterList","type","isDragStart","createMatrix","Infinity","containerRect","getDistElementMatrix","boundInfo","element","boundElement","rectElement","isString","hitRect","firstPassedTargets","pointTarget","clickedTarget","hasInsideTargets","isPreventSelect","isTrusted","result","offsetPos","calculateMatrixDist","containerX","containerY","scaleMatrix","offsetSize","prevSelectedTargets","selectedTargets","passedTargets","isSelect","isDrag","combi","getCombi","toggleKeys","isArray","singleKey_1","key","containers"],"mappings":"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","sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.datas.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement) {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n    } = diff(beforeTargets, afterTargets);\n\n    return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n:host {\n    position: absolute;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n    \"rootContainer\",\n    \"dragCondition\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n    rootContainer: Object,\n    dragCondition: Function,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n] as const;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport { getDistElementMatrix, calculateMatrixDist, createMatrix } from \"css-to-mat\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.target;\n        this.container = options.container || document.body;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            dragCondition: null,\n            rootContainer: null,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     *\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): this {\n        this.selectedTargets = selectedTargets;\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isObject(target)) {\n                selectableElements.push(target);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                elements.forEach((el) => {\n                    selectableElements.push(el);\n                });\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     */\n    public findSelectableTargets(datas: any = this.gesto.getEventDatas()) {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map((target) =>\n            this.getElementPoints(target)\n        );\n        datas.selectableTargets = selectableTargets;\n        datas.selectablePoints = selectablePoints;\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this.onKeyDown)\n                .keyup(this.onKeyUp)\n                .on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : this.options.dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragEnd: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        selectablePoints: number[][][]\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        return targets.filter((_, i) => {\n            const points = selectablePoints[i];\n            const inArea = isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            const overlapSize = getAreaSize(overlapPoints);\n            const targetSize = getAreaSize(points);\n            const rate = between(\n                Math.round((overlapSize / targetSize) * 100),\n                0,\n                100\n            );\n\n            if (rate >= Math.min(100, hitRate)) {\n                return true;\n            }\n            return false;\n        });\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scroll\", ({ container, direction }) => {\n                this.emit(\"scroll\", {\n                    container,\n                    direction,\n                });\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const datas = inputEvent.datas;\n                const boundArea = datas.boundArea;\n\n                datas.startX -= offsetX;\n                datas.startY -= offsetY;\n                datas.selectablePoints.forEach((points: number[][]) => {\n                    points.forEach((pos) => {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n\n                boundArea.left -= offsetX;\n                boundArea.right -= offsetX;\n                boundArea.top -= offsetY;\n                boundArea.bottom -= offsetY;\n\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    false\n                );\n\n                inputEvent.distX += offsetX;\n                inputEvent.distY += offsetY;\n                this.check(inputEvent);\n            });\n    }\n    private select(\n        prevSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        inputEvent: any,\n        isStart?: boolean\n    ) {\n        const { added, removed, prevList, list } = diff(\n            prevSelectedTargets,\n            selectedTargets\n        );\n\n        this.selectedTargets = selectedTargets;\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"select\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent\n    ) {\n        const { inputEvent, isDouble } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"selectEnd\", {\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isClick: !!e.isClick,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const {\n            continueSelect,\n            selectFromInside,\n            selectByClick,\n            rootContainer,\n            boundContainer,\n            preventDragFromInside = true,\n            dragCondition,\n        } = this.options;\n\n        if (dragCondition && !dragCondition(e)) {\n            e.stop();\n            return;\n        }\n        this.findSelectableTargets(datas);\n        datas.startSelectedTargets = this.selectedTargets;\n        datas.scaleMatrix = createMatrix();\n        datas.containerX = 0;\n        datas.containerY = 0;\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n        if (rootContainer) {\n            const containerRect = this.container.getBoundingClientRect();\n\n            datas.containerX = containerRect.left;\n            datas.containerY = containerRect.top;\n            datas.scaleMatrix = getDistElementMatrix(this.container, rootContainer);\n        }\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                        ...boundContainer,\n                    }\n                    : {\n                        element: boundContainer,\n                        left: true,\n                        top: true,\n                        bottom: true,\n                        right: true,\n                    };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        datas.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n        if (!selectFromInside || selectByClick) {\n            let pointTarget = (clickedTarget ||\n                document.elementFromPoint(clientX, clientY)) as\n                | HTMLElement\n                | SVGElement;\n\n            while (pointTarget) {\n                if (\n                    datas.selectableTargets.indexOf(\n                        pointTarget as HTMLElement | SVGElement\n                    ) > -1\n                ) {\n                    break;\n                }\n                pointTarget = pointTarget.parentElement;\n            }\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.emit(\"dragStart\", { ...e })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (!continueSelect) {\n            datas.startPassedTargets = [];\n        } else {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets\n            );\n            datas.startPassedTargets = this.selectedTargets;\n        }\n        this.select(\n            this.selectedTargets,\n            firstPassedTargets,\n            hitRect,\n            inputEvent,\n            true\n        );\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectFlag = false;\n        datas.preventDragFromInside = false;\n\n        const offsetPos = calculateMatrixDist(datas.scaleMatrix, [\n            clientX - datas.containerX,\n            clientY - datas.containerY,\n        ]);\n        datas.boundsArea = this.target.style.cssText += `position: ${rootContainer ? \"absolute\" : \"fixed\"};`\n            + `left:0px;top:0px;`\n            + `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px)`;\n\n        if (isPreventSelect && selectByClick) {\n            inputEvent.preventDefault();\n\n            if (preventDragFromInside) {\n                this.selectEnd(\n                    datas.startSelectedTargets,\n                    datas.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                datas.preventDragFromInside = true;\n            }\n        } else {\n            datas.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n        }\n        return true;\n    };\n    private check(e: any, rect = getRect(e, this.options.ratio)) {\n        const { datas, inputEvent } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = datas.selectFlag;\n        const {\n            containerX,\n            containerY,\n            scaleMatrix,\n        } = datas;\n        const offsetPos = calculateMatrixDist(scaleMatrix, [\n            left - containerX,\n            top - containerY,\n        ]);\n        const offsetSize = calculateMatrixDist(scaleMatrix, [\n            width,\n            height,\n        ]);\n        let prevSelectedTargets: Array<HTMLElement | SVGElement> = [];\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${offsetPos[0]}px, ${offsetPos[1]}px);` +\n                `width:${offsetSize[0]}px;height:${offsetSize[1]}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                datas.startX,\n                datas.startY,\n                datas.selectableTargets,\n                datas.selectablePoints\n            );\n            prevSelectedTargets = this.selectedTargets;\n            selectedTargets = passTargets(\n                datas.startPassedTargets,\n                passedTargets\n            );\n\n            this.selectedTargets = selectedTargets;\n        }\n        /**\n         * When the drag, the drag event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"drag\", e => {\n         *   e.stop();\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = this.emit(\"drag\", {\n            ...e,\n            isSelect: selectFlag,\n            rect,\n        });\n        if (result === false) {\n            this.target.style.cssText += \"display: none;\";\n            e.stop();\n            return;\n        }\n\n        if (selectFlag) {\n            this.select(prevSelectedTargets, selectedTargets, rect, inputEvent);\n        }\n    }\n    private onDrag = (e: OnDrag) => {\n        if (e.datas.selectFlag) {\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                if (this.dragScroll.drag(e, scrollOptions)) {\n                    return;\n                }\n            }\n        }\n        this.check(e);\n    };\n    private onDragEnd = (e: OnDragEvent) => {\n        const { datas, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = datas.selectFlag;\n\n        if (inputEvent && !e.isClick) {\n            this.emit(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                isClick: !!e.isClick,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n        if (selectFlag) {\n            datas.selectFlag = false;\n            this.dragScroll.dragEnd();\n        }\n        if (!datas.preventDragFromInside) {\n            this.selectEnd(\n                datas.startSelectedTargets,\n                datas.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private sameCombiKey(e: any, isKeyup?: boolean) {\n        const toggleContinueSelect = [].concat(\n            this.options.toggleContinueSelect\n        );\n        const combi = getCombi(e.inputEvent, e.key);\n        const toggleKeys = isArray(toggleContinueSelect[0])\n            ? toggleContinueSelect\n            : [toggleContinueSelect];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keydown\", {});\n    };\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e, true)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"keyup\", {});\n    };\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.continueSelect = false;\n            this.emit(\"keyup\", {});\n        }\n    };\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n}\n\ninterface Selecto extends SelectoProperties { }\n\nexport default Selecto;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n"]},"metadata":{},"sourceType":"module"}