{"ast":null,"code":"import _toConsumableArray from \"/home/mars/Bureau/Vrai Projet/carre-jaune-original/MDB-original/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/mars/Bureau/Vrai Projet/carre-jaune-original/MDB-original/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/mars/Bureau/Vrai Projet/carre-jaune-original/MDB-original/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport \"./styles.css\";\nimport mapArray from \"./mapArray\"; // Marsa Add 1\n\nimport Selecto from \"react-selecto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedPixels = _React$useState2[0],\n      setSelected = _React$useState2[1];\n\n  console.log(\"selectedPixels\", selectedPixels);\n  return /*#__PURE__*/_jsxDEV(TransformWrapper, {\n    maxScale: 40,\n    doubleClick: {\n      step: 1\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Selecto // The container to add a selection element\n      , {\n        container: document.body // The area to drag selection element (default: container)\n        ,\n        dragContainer: window // Targets to select. You can register a queryselector or an Element.\n        ,\n        selectableTargets: [\".container\"] // Whether to select by click (default: true)\n        ,\n        selectByClick: true // Whether to select from the target inside (default: true)\n        ,\n        selectFromInside: true // After the select, whether to select the next target with the selected target (deselected if the target is selected again).\n        ,\n        continueSelect: false // Determines which key to continue selecting the next target via keydown and keyup.\n        ,\n        toggleContinueSelect: \"shift\" // The container for keydown and keyup events\n        ,\n        keyContainer: window // The rate at which the target overlaps the drag area to be selected. (default: 100)\n        ,\n        hitRate: 100,\n        onSelect: function onSelect(e) {\n          e.added.forEach(function (el) {\n            el.classList.add(\"selected\");\n          });\n          e.removed.forEach(function (el) {\n            el.classList.remove(\"selected\");\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TransformComponent, {\n        wrapperStyle: {\n          maxWidth: \"100%\",\n          maxHeight: \"100vh\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: mapArray === null || mapArray === void 0 ? void 0 : mapArray.map(function (arr, i) {\n            return arr.map(function (el, idx) {\n              var isSelected = selectedPixels.find(function (x) {\n                return x === \"\".concat(i, \"_\").concat(idx);\n              });\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: el ? isSelected ? \"selected\" : \"pix\" : \"ele\",\n                onClick: function onClick() {\n                  if (el) {\n                    if (isSelected) {\n                      var newArr = _toConsumableArray(selectedPixels);\n\n                      var index = newArr.indexOf(\"\".concat(i, \"_\").concat(idx));\n\n                      if (index > -1) {\n                        newArr.splice(index, 1);\n                      }\n\n                      setSelected(newArr);\n                    } else {\n                      setSelected(function (state) {\n                        return [].concat(_toConsumableArray(state), [\"\".concat(i, \"_\").concat(idx)]);\n                      });\n                    }\n                  }\n                }\n              }, \"\".concat(i, \"_\").concat(idx), false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 19\n              }, _this);\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RKcUyWfrQWcsaY8kcm0WHt6OiRU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mars/Bureau/Vrai Projet/carre-jaune-original/MDB-original/src/App.js"],"names":["React","TransformWrapper","TransformComponent","mapArray","Selecto","App","useState","selectedPixels","setSelected","console","log","step","document","body","window","e","added","forEach","el","classList","add","removed","remove","maxWidth","maxHeight","map","arr","i","idx","isSelected","find","x","newArr","index","indexOf","splice","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,sBAArD;AACA,OAAO,cAAP;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAAA;;AAC5B,wBAAsCL,KAAK,CAACM,QAAN,CAAe,EAAf,CAAtC;AAAA;AAAA,MAAOC,cAAP;AAAA,MAAuBC,WAAvB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,cAA9B;AACA,sBACE,QAAC,gBAAD;AACE,IAAA,QAAQ,EAAE,EADZ;AAEE,IAAA,WAAW,EAAE;AACXI,MAAAA,IAAI,EAAE;AADK,KAFf;AAAA,2BAME;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,OAAD,CACE;AADF;AAEE,QAAA,SAAS,EAAEC,QAAQ,CAACC,IAFtB,CAGE;AAHF;AAIE,QAAA,aAAa,EAAEC,MAJjB,CAKE;AALF;AAME,QAAA,iBAAiB,EAAE,CAAC,YAAD,CANrB,CAOE;AAPF;AAQE,QAAA,aAAa,EAAE,IARjB,CASE;AATF;AAUE,QAAA,gBAAgB,EAAE,IAVpB,CAWE;AAXF;AAYE,QAAA,cAAc,EAAE,KAZlB,CAaE;AAbF;AAcE,QAAA,oBAAoB,EAAE,OAdxB,CAeE;AAfF;AAgBE,QAAA,YAAY,EAAEA,MAhBhB,CAiBE;AAjBF;AAkBE,QAAA,OAAO,EAAE,GAlBX;AAmBE,QAAA,QAAQ,EAAE,kBAACC,CAAD,EAAO;AACfA,UAAAA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgB,UAACC,EAAD,EAAQ;AACtBA,YAAAA,EAAE,CAACC,SAAH,CAAaC,GAAb,CAAiB,UAAjB;AACD,WAFD;AAGAL,UAAAA,CAAC,CAACM,OAAF,CAAUJ,OAAV,CAAkB,UAACC,EAAD,EAAQ;AACxBA,YAAAA,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,UAApB;AACD,WAFD;AAGD;AA1BH;AAAA;AAAA;AAAA;AAAA,cADF,eA6BE,QAAC,kBAAD;AACE,QAAA,YAAY,EAAE;AACZC,UAAAA,QAAQ,EAAE,MADE;AAEZC,UAAAA,SAAS,EAAE;AAFC,SADhB;AAAA,+BAME;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,oBACGrB,QADH,aACGA,QADH,uBACGA,QAAQ,CAAEsB,GAAV,CAAc,UAACC,GAAD,EAAMC,CAAN,EAAY;AACzB,mBAAOD,GAAG,CAACD,GAAJ,CAAQ,UAACP,EAAD,EAAKU,GAAL,EAAa;AAC1B,kBAAMC,UAAU,GAAGtB,cAAc,CAACuB,IAAf,CACjB,UAACC,CAAD;AAAA,uBAAOA,CAAC,eAAQJ,CAAR,cAAaC,GAAb,CAAR;AAAA,eADiB,CAAnB;AAGA,kCACE;AAEE,gBAAA,SAAS,EAAEV,EAAE,GAAIW,UAAU,GAAG,UAAH,GAAgB,KAA9B,GAAuC,KAFtD;AAGE,gBAAA,OAAO,EAAE,mBAAM;AACb,sBAAIX,EAAJ,EAAQ;AACN,wBAAIW,UAAJ,EAAgB;AACd,0BAAMG,MAAM,sBAAOzB,cAAP,CAAZ;;AACA,0BAAM0B,KAAK,GAAGD,MAAM,CAACE,OAAP,WAAkBP,CAAlB,cAAuBC,GAAvB,EAAd;;AACA,0BAAIK,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdD,wBAAAA,MAAM,CAACG,MAAP,CAAcF,KAAd,EAAqB,CAArB;AACD;;AACDzB,sBAAAA,WAAW,CAACwB,MAAD,CAAX;AACD,qBAPD,MAOO;AACLxB,sBAAAA,WAAW,CAAC,UAAC4B,KAAD;AAAA,4DAAeA,KAAf,cAAyBT,CAAzB,cAA8BC,GAA9B;AAAA,uBAAD,CAAX;AACD;AACF;AACF;AAhBH,2BACUD,CADV,cACeC,GADf;AAAA;AAAA;AAAA;AAAA,uBADF;AAoBD,aAxBM,CAAP;AAyBD,WA1BA;AADH;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AA2ED;;GA9EuBvB,G;;KAAAA,G","sourcesContent":["import React from \"react\";\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport \"./styles.css\";\nimport mapArray from \"./mapArray\";\n// Marsa Add 1\nimport Selecto from \"react-selecto\";\n\nexport default function App() {\n  const [selectedPixels, setSelected] = React.useState([]);\n  console.log(\"selectedPixels\", selectedPixels);\n  return (\n    <TransformWrapper\n      maxScale={40}\n      doubleClick={{\n        step: 1,\n      }}\n    >\n      <div className=\"App\">\n        <Selecto\n          // The container to add a selection element\n          container={document.body}\n          // The area to drag selection element (default: container)\n          dragContainer={window}\n          // Targets to select. You can register a queryselector or an Element.\n          selectableTargets={[\".container\"]}\n          // Whether to select by click (default: true)\n          selectByClick={true}\n          // Whether to select from the target inside (default: true)\n          selectFromInside={true}\n          // After the select, whether to select the next target with the selected target (deselected if the target is selected again).\n          continueSelect={false}\n          // Determines which key to continue selecting the next target via keydown and keyup.\n          toggleContinueSelect={\"shift\"}\n          // The container for keydown and keyup events\n          keyContainer={window}\n          // The rate at which the target overlaps the drag area to be selected. (default: 100)\n          hitRate={100}\n          onSelect={(e) => {\n            e.added.forEach((el) => {\n              el.classList.add(\"selected\");\n            });\n            e.removed.forEach((el) => {\n              el.classList.remove(\"selected\");\n            });\n          }}\n        />\n        <TransformComponent\n          wrapperStyle={{\n            maxWidth: \"100%\",\n            maxHeight: \"100vh\",\n          }}\n        >\n          <div className=\"container\">\n            {mapArray?.map((arr, i) => {\n              return arr.map((el, idx) => {\n                const isSelected = selectedPixels.find(\n                  (x) => x === `${i}_${idx}`\n                );\n                return (\n                  <div\n                    key={`${i}_${idx}`}\n                    className={el ? (isSelected ? \"selected\" : \"pix\") : \"ele\"}\n                    onClick={() => {\n                      if (el) {\n                        if (isSelected) {\n                          const newArr = [...selectedPixels];\n                          const index = newArr.indexOf(`${i}_${idx}`);\n                          if (index > -1) {\n                            newArr.splice(index, 1);\n                          }\n                          setSelected(newArr);\n                        } else {\n                          setSelected((state) => [...state, `${i}_${idx}`]);\n                        }\n                      }\n                    }}\n                  ></div>\n                );\n              });\n            })}\n          </div>\n        </TransformComponent>\n      </div>\n    </TransformWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}